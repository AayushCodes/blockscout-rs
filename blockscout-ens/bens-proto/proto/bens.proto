syntax = "proto3";

package blockscout.bens.v1;

option go_package = "github.com/blockscout/blockscout-rs/bens";

service DomainsExtractor {
  rpc SearchAddress(SearchAddressRequest) returns (SearchAddressResponse) {}
  rpc GetDetailedDomain(GetDetailedDomainRequest) returns (GetDetailedDomainResponse) {}
}

enum DomainSource {
  /// https://docs.ens.domains/
  ENS = 0;
  // /// https://docs.unstoppabledomains.com/
  //UNSTOPPABLE_DOMAINS = 1;
}

message Domain {
  /// Source of domain name. Now could be only ENS, in future we could add UNSTOPPABLE_DOMAINS
  DomainSource domain_source = 1;
  /// Unique id for the domain, also known as nodehash
  string id = 2;
  /// The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  string name = 3;
  /// Integer representation of labelhash
  uint64 token_id = 4;
  /// The account that owns the domain
  string owner = 5;
  /// Optinal. Resolved address of this domain
  optional string resolved_address = 6;
  /// Optinal. The account that owns the ERC721 NFT for the domain
  optional string registrant = 7;
  /// Optinal. Unix timestamp of expiry date. None means never expires
  optional uint64 expiry_date = 8;
  /// Unix timestamp of regisration date
  uint64 registration_date = 9;
  /// Map chain -> resolved_address. This map will contain `current_chain_id` -> `resovled_address` if `resovled_address` is not None
  map<string, string> other_address = 10;
}

message DomainEvent {
  /// Transaction hash where action occured
  string transaction_hash = 1;
  /// Timestamp of this transaction
  uint64 timestamp = 2;
  /// Sender of transaction
  string from_address = 3;
  /// Optinal. Action name
  optional string action = 4;
}


message SearchAddressRequest {
  /// Ethereum address of EOA or contract
  string address = 1;
  /// The chain (network) where domain search should be done
  uint64 chain_id = 2;
  /// Include domains resolved to the address
  bool resolved_to = 3;
  /// Include domains owned by the address
  bool owned_by = 4;
}

message SearchAddressResponse {
  // List of domains that resolved to requested address
  // Sorted by relevance, so first address could be displayed as main resolved address
  repeated Domain resolved_to = 1;
  // List of domains owned by requested address
  repeated Domain owned_by = 2;
}

message GetDetailedDomainRequest {
  /// Name of domain, for example vitalik.eth
  string name = 1;
  /// The chain (network) where domain search should be done
  uint64 chain_id = 2;
}

message GetDetailedDomainResponse {
  /// Optinal. Basic domain info
  optional Domain domain = 1;
  /// List of domain events
  repeated DomainEvent history = 2;
}